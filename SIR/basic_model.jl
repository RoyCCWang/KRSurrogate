
#### SIR.

function evalposteriorSIR(Œ∏::Vector{T},
                          const_Œ∏::Vector{T},
                          parserfunc::Function,
                          Œ£_y::Matrix{T},
                          y_ùì£::Vector{T},
                          ùì£;
                          t0::T = 0.0,
                          t_end::T = 365.0,
                          Œ≤_prior_shape::T = 1.0,
                          Œ≤_prior_scale::T = 1.0,
                          Œ≥_prior_shape::T = 1.0,
                          Œ≥_prior_scale::T = 1.0) where T <: Real
    #
    k, I_0, S_0, R_0, Œ≤, Œ≥, N_pop = parserfunc(Œ∏, const_Œ∏)

    out = evalSIRlnpdf( Œ£_y, k, I_0, S_0, R_0,
                        Œ≤, Œ≥, N_pop, y_ùì£, ùì£;
                          t0 = t0,
                          t_end = t_end,
                          Œ≤_prior_shape = Œ≤_prior_shape,
                          Œ≤_prior_scale = Œ≤_prior_scale,
                          Œ≥_prior_shape = Œ≥_prior_shape,
                          Œ≥_prior_scale = Œ≥_prior_scale)

    return out
end

"""
Evaluates the joint probability density of Œ∏ and y(ùì£).
y_ùì£ is the observation of y(ùì£).
"""
function evalSIRlnpdf(   Œ£_y::Matrix{T},
                        k::T,
                        I_0::T,
                        S_0::T,
                        R_0::T,
                        Œ≤::T,
                        Œ≥::T,
                        N::T,
                        y_ùì£::Vector{T},
                        ùì£;
                        t0::T = 0.0,
                        t_end::T = 365.0,
                        Œ≤_prior_shape::T = 1.0,
                        Œ≤_prior_scale::T = 1.0,
                        Œ≥_prior_shape::T = 1.0,
                        Œ≥_prior_scale::T = 1.0) where T <: Real
    ### set up priors.
    dist_Œ≤ = Distributions.Gamma(Œ≤_prior_shape, Œ≤_prior_scale)
    dist_Œ≥ = Distributions.Gamma(Œ≥_prior_shape, Œ≥_prior_scale)

    # ## debug.
    # println("Œ≤ = ", Œ≤)
    # println("Œ≥ = ", Œ≥)
    # println("S_0 = ", S_0)
    # println("I_0 = ", I_0)
    # println("R_0 = ", R_0)
    # println("k = ", k)
    # println("N = ", N)



    # # draw. This is for MCMC.
    # Œ≤ = rand(dist_Œ≤)
    # Œ≥ = rand(dist_Œ≥)

    # evaluate the prior portion of the joint pdf.
    ln_p_Œ≤ = Distributions.logpdf(dist_Œ≤, Œ≤)
    ln_p_Œ≥ = Distributions.logpdf(dist_Œ≥, Œ≥)

    ### set up likelihood.
    S_t_unused, I_t,
      R_t_unused = solveSIRnumerical(  I_0,
                                        S_0,
                                        R_0,
                                        Œ≤,
                                        Œ≥,
                                        N;
                                        t0 = t0,
                                        t_end = t_end)


    # evaluate the likelihood portion.
    Œº = k .* I_t.(ùì£)
    dist_y = Distributions.MvNormal(Œº, Œ£_y)
    #ln_likelihood = Distributions.logpdf(dist_y, y_ùì£)

    res = y_ùì£-Œº
    unnormalized_ln_likelihood = -dot(res, Œ£_y\res)/2

    n_st = 3
    n_end = 4
    res = res[n_st:n_end]
    unnormalized_ln_likelihood = -dot(res, Œ£_y[n_st:n_end,n_st:n_end]\res)/2

    ###

    ## actual probability. too small for density fit.
    #out = ln_p_Œ≤ + ln_p_Œ≥ + ln_likelihood

    # ## prior only.
    # out = ln_p_Œ≤ + ln_p_Œ≥

    ## unnormalized likelihood only.
    #out = unnormalized_ln_likelihood

    # ## unnormalized posterior.
    out = ln_p_Œ≤ + ln_p_Œ≥ + unnormalized_ln_likelihood

    return out
    #return out, Œº
end

function solveSIRnumerical( I_0::T,
                            S_0::T,
                            R_0::T,
                            Œ≤::T,
                            Œ≥::T,
                            N::T;
                            t0::T = 0.0,
                            t_end::T = 365.0) where T <: Real
    #
    Œ∏ = [N; Œ≤; Œ≥]
    u0 = [S_0; I_0; R_0]

    tspan = (t0, t_end)
    prob = DifferentialEquations.ODEProblem(SIR!, u0, tspan, Œ∏)
    sol = DifferentialEquations.solve(prob)

    S = tt->sol(tt)[1]
    I = tt->sol(tt)[2]
    R = tt->sol(tt)[3]

    return S, I, R
end

######

function SIR!(du, u, Œ∏, t)

  susceptible = u[1]
  infected = u[2]
  removed = u[3]

  N = Œ∏[1]
  Œ≤ = Œ∏[2]
  Œ≥ = Œ∏[3]

  obj1 = susceptible*infected*Œ≤/N
  obj2 = Œ≥*infected

  du[1] = -obj1
  du[2] = obj1 - obj2
  du[3] = obj2
end
